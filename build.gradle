def javaVersion    = '1.7';
def projectVersion = '0.7.2';

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'java'
    apply plugin: 'maven'

    project.group = 'org.develnext'
    project.version = projectVersion
    project.ext.isSnapshot = !Boolean.getBoolean("release");

    if (project.ext.isSnapshot) {
        version += '-SNAPSHOT'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    task sourcesJar(type: Jar, dependsOn: 'classes') {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = 2.3;
}

configure(subprojects) {
    apply plugin: 'maven'
    apply plugin: 'java'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    sourceSets {
        main.java.srcDirs = ['src/main/java']
        main.resources.srcDirs = ['src/main/resources']

        test.java.srcDirs = ["src/main/tests"]
        test.resources.srcDirs = ["src/main/tests"]
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
}

// for deploy
configure([
        project(':jphp-runtime'),
        project(':jphp-core'),
        project(':jphp-swing-ext'),
        project(':jphp-zend-ext'),
        project(':jphp-json-ext'),
        project(':jphp-jsoup-ext'),
        project(':jphp-xml-ext'),
        project(':jphp-gdx-ext'),
        project(':jphp-mail-ext'),
        project(':jphp-sql-ext'),
        project(':jphp-webserver-ext'),
        project(':jphp-compress-ext'),
        project(':jphp-orientdb-ext'),
        project(':jphp-debugger'),

        project(':jphp-android'),
        project(':jphp-scripting'),
        project(':jphp-gradle-plugin'),
        project(':jphp-gen-api'),
]) {
    apply plugin: 'com.jfrog.bintray'

    if (!project.ext.isSnapshot) {
        javadoc.failOnError = false

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        jar.dependsOn += [sourcesJar, javadocJar]

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        signing {
            sign configurations.archives
        }
    } else {
        jar.dependsOn += [sourcesJar]

        artifacts {
            archives sourcesJar
        }
    }

    bintray {
        user = rootProject.hasProperty('bintray.user') ? rootProject.getProperty("bintray.user") : "";
        key = rootProject.hasProperty('bintray.apikey') ? rootProject.getProperty("bintray.apikey") : "";

        configurations = ['archives']

        pkg {
            repo = "maven"
            name = "jphp-compiler"
            websiteUrl = 'http://github.com/jphp-compiler'
            vcsUrl = 'http://github.com/jphp-compiler'
            licenses = ["Apache-2.0"]
            publish = true
        }
    }

    task deploy << {
        rootProject.ext {
            if (rootProject.hasProperty('deployUserName')) {
                username = rootProject.deployUserName
            } else {
                username = rootProject.hasProperty('username') ? rootProject.username : System.console().readLine("\nusername: ")
            }

            if (rootProject.hasProperty('deployPassword')) {
                password = rootProject.deployPassword
            } else {
                password = rootProject.hasProperty('password') ? rootProject.password : System.console().readPassword("password: ").toString()
            }
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: 'http://repo.develnext.org/repository/internal') {
                        authentication(userName: rootProject.username, password: rootProject.password);
                    }

                    snapshotRepository(url: 'http://repo.develnext.org/repository/snapshots') {
                        authentication(userName: rootProject.username, password: rootProject.password);
                    }
                }
            }
        }
        uploadArchives.execute();
    }

    deploy.dependsOn += jar
}
